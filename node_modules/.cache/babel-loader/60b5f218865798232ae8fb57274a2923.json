{"ast":null,"code":"import _objectSpread from \"/Users/guligenaaierken/Desktop/All projects/Final Project/Therappoint_frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nvar _jsxFileName = \"/Users/guligenaaierken/Desktop/All projects/Final Project/Therappoint_frontend/src/components/SearchBar.js\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { Search } from 'semantic-ui-react';\nimport { setSearchedUser, setSearchedValue } from '../reducer/actions';\nimport { Redirect } from 'react-router';\nimport './SearchBar.css';\n\nclass SearchBar extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      isLoading: false,\n      results: [],\n      resultSelect: false\n    };\n\n    this.handleSearchChange = evt => {\n      let newVal = evt.target.value;\n      this.props.setSearchedValue(newVal);\n      this.handleSource();\n    };\n\n    this.handleSource = () => {\n      console.log(!this.props.user.specialty);\n\n      if (!this.props.user.specialty) {\n        let newSource = this.props.providers.map(obj => {\n          if (object.first_name && object.last_name) {\n            return _objectSpread({\n              title: object.first_name.toLowerCase() + \" \" + object.last_name.toLowerCase() + \" \" + object.username.toLowerCase()\n            }, object);\n          } else {\n            return _objectSpread({\n              title: object.username.toLowerCase()\n            }, object);\n          }\n        });\n        const results = newSource.filter(obj => {\n          return obj.title.indexOf(this.props.searchedValue) !== -1;\n        });\n        this.setState(_objectSpread({}, this.state, {\n          results: results\n        }));\n      } else {} // if(this.props.source){\n      //     // different user would have different search result\n      //     if(this.props.user.specialty){\n      //         const newSource = this.props.source.map(object => {\n      //             /////avoid user has no first name bug\n      //             if (object.first_name && object.last_name) {\n      //                 return { title: object.first_name.toLowerCase() + \" \" + object.last_name.toLowerCase() + \" \" + object.username.toLowerCase(), ...object}\n      //             } else {\n      //                 return { title: object.username.toLowerCase(), ...object}\n      //             }\n      //         }).filter((obj) => {\n      //             return !obj.specialty\n      //         }\n      //         )\n      //         const results = newSource.filter((obj) => {\n      //              return obj.title.indexOf(this.props.searchedValue) !== -1 \n      //         })\n      //         this.setState({\n      //             ...this.state,\n      //             results: results\n      //         })}else{\n      //             const newSource = this.props.source.map(object => {\n      //                 /////avoid user has no first name bug\n      //                 if (object.first_name && object.last_name) {\n      //                     return { title: object.first_name.toLowerCase() + \" \" + object.last_name.toLowerCase() + \" \" + object.username.toLowerCase(), ...object}\n      //                 } else {\n      //                     return { title: object.username.toLowerCase(), ...object}\n      //                 }\n      //             }).filter((obj) => {\n      //                 return obj.specialty\n      //             }\n      //             )\n      //             const results = newSource.filter((obj) => {\n      //                  return obj.title.includes(this.props.searchedValue)\n      //             })\n      //             this.setState({\n      //                 ...this.state,\n      //                 results: results\n      //             })\n      //         }\n      //     }\n\n    };\n\n    this.handleResultSelect = evt => {\n      let searchedUser = [...this.state.results].find(user => {\n        return user.title === evt.target.innerText;\n      });\n      this.props.setSearchedUser(searchedUser);\n      localStorage.searched_id = searchedUser.id;\n      localStorage.searched_name = searchedUser.first_name + \" \" + searchedUser.last_name;\n      localStorage.searched_img = searchedUser.img_url;\n      localStorage.searched_address = searchedUser.address;\n      localStorage.searched_specialty = searchedUser.specialty;\n      localStorage.searched_board_certified = searchedUser.board_certified;\n      localStorage.searched_email = searchedUser.email;\n      localStorage.searched_phone_number = searchedUser.phone_number;\n      this.setState(_objectSpread({}, this.state, {\n        resultSelect: !this.state.resultSelect\n      }));\n    };\n  }\n\n  render() {\n    if (this.state.resultSelect === true) {\n      return React.createElement(Redirect, {\n        to: \"/portfolio\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 146\n        },\n        __self: this\n      });\n    } else {\n      return this.props.user.specialty ? React.createElement(Search, {\n        size: \"massive\",\n        className: \"tepish derizisi centered\",\n        onSearchChange: this.handleSearchChange,\n        placeholder: \"Find your client by name\",\n        results: this.state.results,\n        onResultSelect: this.handleResultSelect,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 149\n        },\n        __self: this\n      }) : React.createElement(Search, {\n        size: \"massive\",\n        className: \"tepish derizisi centered\",\n        onSearchChange: this.handleSearchChange,\n        placeholder: \"Find your provider by name\",\n        results: this.state.results,\n        onResultSelect: this.handleResultSelect,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 151\n        },\n        __self: this\n      });\n    }\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    user: state.user,\n    source: state.source,\n    searchedValue: state.searchedValue,\n    clients: state.clients,\n    providers: state.providers\n  };\n};\n\nexport default connect(mapStateToProps, {\n  setSearchedUser,\n  setSearchedValue\n})(SearchBar);","map":{"version":3,"sources":["/Users/guligenaaierken/Desktop/All projects/Final Project/Therappoint_frontend/src/components/SearchBar.js"],"names":["React","connect","Search","setSearchedUser","setSearchedValue","Redirect","SearchBar","Component","state","isLoading","results","resultSelect","handleSearchChange","evt","newVal","target","value","props","handleSource","console","log","user","specialty","newSource","providers","map","obj","object","first_name","last_name","title","toLowerCase","username","filter","indexOf","searchedValue","setState","handleResultSelect","searchedUser","find","innerText","localStorage","searched_id","id","searched_name","searched_img","img_url","searched_address","address","searched_specialty","searched_board_certified","board_certified","searched_email","email","searched_phone_number","phone_number","render","mapStateToProps","source","clients"],"mappings":"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","sourcesContent":["import React from 'react'\nimport { connect } from 'react-redux'\nimport {Search} from 'semantic-ui-react'\nimport { setSearchedUser, setSearchedValue} from '../reducer/actions'\nimport { Redirect } from 'react-router'\nimport './SearchBar.css'\n\nclass SearchBar extends React.Component {\n\n  state = {\n      isLoading: false,\n      results: [],\n      resultSelect: false\n\n  }\n\n\n\n  handleSearchChange = (evt) => {\n      \n      let newVal = evt.target.value\n     this.props.setSearchedValue(newVal)\n     \n     this.handleSource()\n     \n \n      \n        \n}\n\n\nhandleSource = () => {\n    console.log(!this.props.user.specialty)\n    if(!this.props.user.specialty){\n        let newSource = this.props.providers.map((obj) => {\n            if (object.first_name && object.last_name) {\n                                return { title: object.first_name.toLowerCase() + \" \" + object.last_name.toLowerCase() + \" \" + object.username.toLowerCase(), ...object}\n                            } else {\n                                return { title: object.username.toLowerCase(), ...object}\n            \n                            }\n                \n        }\n        )\n\n        const results = newSource.filter((obj) => {\n                         return obj.title.indexOf(this.props.searchedValue) !== -1 \n                        \n                    })\n\n                    this.setState({\n                                    ...this.state,\n                                    results: results\n                                })\n\n       \n    }else{\n        \n    }\n    // if(this.props.source){\n    //     // different user would have different search result\n    //     if(this.props.user.specialty){\n    //         const newSource = this.props.source.map(object => {\n    //             /////avoid user has no first name bug\n    //             if (object.first_name && object.last_name) {\n    //                 return { title: object.first_name.toLowerCase() + \" \" + object.last_name.toLowerCase() + \" \" + object.username.toLowerCase(), ...object}\n    //             } else {\n    //                 return { title: object.username.toLowerCase(), ...object}\n\n    //             }\n    //         }).filter((obj) => {\n    //             return !obj.specialty\n    //         }\n    //         )\n            \n    //         const results = newSource.filter((obj) => {\n    //              return obj.title.indexOf(this.props.searchedValue) !== -1 \n                \n    //         })\n\n            \n\n    //         this.setState({\n    //             ...this.state,\n    //             results: results\n    //         })}else{\n    //             const newSource = this.props.source.map(object => {\n    //                 /////avoid user has no first name bug\n    //                 if (object.first_name && object.last_name) {\n    //                     return { title: object.first_name.toLowerCase() + \" \" + object.last_name.toLowerCase() + \" \" + object.username.toLowerCase(), ...object}\n    //                 } else {\n    //                     return { title: object.username.toLowerCase(), ...object}\n    \n    //                 }\n    //             }).filter((obj) => {\n    //                 return obj.specialty\n    //             }\n    //             )\n\n    //             const results = newSource.filter((obj) => {\n    //                  return obj.title.includes(this.props.searchedValue)\n                    \n    //             })\n               \n    //             this.setState({\n    //                 ...this.state,\n    //                 results: results\n    //             })\n\n    //         }\n    //     }\n    \n}\n\n\n  handleResultSelect = (evt) => {\n      \n       let searchedUser = [...this.state.results].find((user) => {\n           return user.title === evt.target.innerText\n       })\n\n    \n\n          this.props.setSearchedUser(searchedUser)\n         \n          localStorage.searched_id = searchedUser.id\n          localStorage.searched_name = searchedUser.first_name + \" \" + searchedUser.last_name\n          localStorage.searched_img = searchedUser.img_url\n          localStorage.searched_address = searchedUser.address\n          localStorage.searched_specialty = searchedUser.specialty\n          localStorage.searched_board_certified = searchedUser.board_certified\n          localStorage.searched_email = searchedUser.email\n          localStorage.searched_phone_number = searchedUser.phone_number\n\n      this.setState(\n          {...this.state, resultSelect: !this.state.resultSelect}\n      )\n  }\n  \n\n\nrender(){\n     \n     \n    if(this.state.resultSelect === true) {\n        return <Redirect to=\"/portfolio\"></Redirect>\n    }else{\n      return (this.props.user.specialty?\n        <Search  size=\"massive\" className=\"tepish derizisi centered\" onSearchChange={this.handleSearchChange} placeholder='Find your client by name' results={this.state.results} onResultSelect={this.handleResultSelect}/>\n        :\n        <Search  size=\"massive\" className=\"tepish derizisi centered\" onSearchChange={this.handleSearchChange} placeholder='Find your provider by name' results={this.state.results} onResultSelect={this.handleResultSelect}/>\n       )\n\n        \n\n\n}\n\n}\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        user: state.user,\n        source: state.source,\n        searchedValue: state.searchedValue,\n        clients: state.clients,\n        providers: state.providers\n    }\n}\n\n\nexport default connect(mapStateToProps, {setSearchedUser, setSearchedValue})(SearchBar)"]},"metadata":{},"sourceType":"module"}