{"ast":null,"code":"import _objectSpread from \"/Users/guligenaaierken/Desktop/Final Project/Therappoint_frontend/therappoint_frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nvar _jsxFileName = \"/Users/guligenaaierken/Desktop/Final Project/Therappoint_frontend/therappoint_frontend/src/components/SearchBar.js\";\nimport PropTypes from 'prop-types';\nimport _ from 'lodash';\nimport faker from 'faker';\nimport React, { Component } from 'react';\nimport { Search, Grid, Header, Segment, Label } from 'semantic-ui-react';\nimport { connect } from 'react-redux';\nimport { newSource } from '../reducer/actions';\n\nconst resultRenderer = ({\n  title\n}) => React.createElement(Label, {\n  content: title,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 10\n  },\n  __self: this\n});\n\nresultRenderer.propTypes = {\n  title: PropTypes.string\n};\nconst initialState = {\n  isLoading: false,\n  results: [],\n  value: ''\n};\n\nclass SearchBar extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = initialState;\n\n    this.handleResultSelect = (e, {\n      result\n    }) => this.setState({\n      value: result.title\n    });\n\n    this.handleSearchChange = (e, {\n      value\n    }) => {\n      this.setState({\n        isLoading: true,\n        value\n      });\n      this.props.newSource();\n\n      if (this.props.source) {\n        let newArr = this.props.source.map(object => {\n          return _objectSpread({\n            title: object.first_name + \" \" + object.last_name\n          }, object);\n        });\n        setTimeout(() => {\n          if (this.state.value.length < 1) return this.setState(initialState);\n          const re = new RegExp(_.escapeRegExp(this.state.value), 'i');\n\n          const isMatch = result => re.test(result.title);\n\n          this.setState({\n            isLoading: false,\n            results: _.filter(newArr, isMatch)\n          });\n        }, 300);\n      }\n    };\n  }\n\n  render() {\n    const _this$state = this.state,\n          isLoading = _this$state.isLoading,\n          value = _this$state.value,\n          results = _this$state.results;\n    return React.createElement(Grid, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61\n      },\n      __self: this\n    }, React.createElement(Grid.Column, {\n      width: 6,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62\n      },\n      __self: this\n    }, React.createElement(Search, Object.assign({\n      loading: isLoading,\n      onResultSelect: this.handleResultSelect,\n      onSearchChange: _.debounce(this.handleSearchChange, 500, {\n        leading: true\n      }),\n      results: results,\n      value: value,\n      resultRenderer: resultRenderer\n    }, this.props, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63\n      },\n      __self: this\n    }))), React.createElement(Grid.Column, {\n      width: 10,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      },\n      __self: this\n    }, React.createElement(Segment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    }, React.createElement(Header, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77\n      },\n      __self: this\n    }, \"State\"), React.createElement(\"pre\", {\n      style: {\n        overflowX: 'auto'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78\n      },\n      __self: this\n    }, JSON.stringify(this.state, null, 2)), React.createElement(Header, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81\n      },\n      __self: this\n    }, \"Options\"), React.createElement(\"pre\", {\n      style: {\n        overflowX: 'auto'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82\n      },\n      __self: this\n    }, JSON.stringify(source, null, 2)))));\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    source: state.source\n  };\n};\n\nexport default connect(mapStateToProps, {\n  newSource\n})(SearchBar);","map":{"version":3,"sources":["/Users/guligenaaierken/Desktop/Final Project/Therappoint_frontend/therappoint_frontend/src/components/SearchBar.js"],"names":["PropTypes","_","faker","React","Component","Search","Grid","Header","Segment","Label","connect","newSource","resultRenderer","title","propTypes","string","initialState","isLoading","results","value","SearchBar","state","handleResultSelect","e","result","setState","handleSearchChange","props","source","newArr","map","object","first_name","last_name","setTimeout","length","re","RegExp","escapeRegExp","isMatch","test","filter","render","debounce","leading","overflowX","JSON","stringify","mapStateToProps"],"mappings":"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","sourcesContent":["import PropTypes from 'prop-types'\nimport _ from 'lodash'\nimport faker from 'faker'\nimport React, { Component } from 'react'\nimport { Search, Grid, Header, Segment, Label } from 'semantic-ui-react'\nimport { connect } from 'react-redux'\nimport {newSource} from '../reducer/actions'\n\n\nconst resultRenderer = ({ title }) => <Label content={title} />\n\nresultRenderer.propTypes = {\n  title: PropTypes.string\n}\n\nconst initialState = { isLoading: false, results: [], value: '' }\n\nclass SearchBar extends Component {\n  state = initialState\n\n  handleResultSelect = (e, { result }) => this.setState({ value: result.title })\n\n  handleSearchChange = (e, { value }) => {\n    this.setState({ isLoading: true, value })\n    this.props.newSource()\n    \n    if(this.props.source){\n    let newArr = this.props.source.map((object) => {\n        return {title: object.first_name + \" \" + object.last_name, ...object}\n    }) \n    \n    setTimeout(() => {\n        if (this.state.value.length < 1) return this.setState(initialState)\n  \n        const re = new RegExp(_.escapeRegExp(this.state.value), 'i')\n        const isMatch = (result) => re.test(result.title)\n  \n        this.setState({\n          isLoading: false,\n          results: _.filter(newArr, isMatch),\n        })\n      }, 300)\n\n}\n    \n   \n     \n    \n      \n\n    \n  }\n\n  \n  \n\n  render() {\n    const { isLoading, value, results } = this.state\n    \n    return (\n      <Grid>\n        <Grid.Column width={6}>\n          <Search\n            loading={isLoading}\n            onResultSelect={this.handleResultSelect}\n            onSearchChange={_.debounce(this.handleSearchChange, 500, {\n              leading: true,\n            })}\n            results={results}\n            value={value}\n            resultRenderer={resultRenderer}\n            {...this.props}\n          />\n        </Grid.Column>\n        <Grid.Column width={10}>\n          <Segment>\n            <Header>State</Header>\n            <pre style={{ overflowX: 'auto' }}>\n              {JSON.stringify(this.state, null, 2)}\n            </pre>\n            <Header>Options</Header>\n            <pre style={{ overflowX: 'auto' }}>\n              {JSON.stringify(source, null, 2)}\n            </pre>\n          </Segment>\n        </Grid.Column>\n      </Grid>\n    )\n  }\n}\n\n\nconst mapStateToProps = (state) => {\n    return {\n        source: state.source\n    } \n}\n\nexport default connect(mapStateToProps, {newSource})(SearchBar)"]},"metadata":{},"sourceType":"module"}