{"ast":null,"code":"var _jsxFileName = \"/Users/guligenaaierken/Desktop/Final Project/Therappoint_frontend/therappoint_frontend/src/components/SearchBar.js\";\nimport PropTypes from 'prop-types';\nimport _ from 'lodash';\nimport faker from 'faker';\nimport React, { Component } from 'react';\nimport { Search, Grid, Header, Segment, Label } from 'semantic-ui-react';\nimport { connect } from 'react-redux';\nimport { searchSource } from '../reducer/actions';\n\nconst source = _.times(5, () => ({\n  title: faker.company.companyName(),\n  description: faker.company.catchPhrase(),\n  image: faker.internet.avatar(),\n  price: faker.finance.amount(0, 100, 2, '$')\n}));\n\nconst resultRenderer = ({\n  title\n}) => React.createElement(Label, {\n  content: title,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 15\n  },\n  __self: this\n});\n\nresultRenderer.propTypes = {\n  title: PropTypes.string,\n  description: PropTypes.string\n};\nconst initialState = {\n  isLoading: false,\n  results: [],\n  value: ''\n};\n\nclass SearchBar extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = initialState;\n\n    this.handleResultSelect = (e, {\n      result\n    }) => {\n      console.log(e.target);\n      this.setState({\n        value: result.title\n      });\n    };\n\n    this.handleSearchChange = (e, {\n      value\n    }) => {\n      this.setState({\n        isLoading: true,\n        value\n      });\n      this.props.searchSource();\n      setTimeout(() => {\n        if (this.state.value.length < 1) return this.setState(initialState);\n        const re = new RegExp(_.escapeRegExp(this.state.value), 'i');\n\n        const isMatch = result => re.test(result.title);\n\n        this.setState({\n          isLoading: false,\n          results: _.filter(source, isMatch)\n        });\n      }, 300);\n    };\n  }\n\n  render() {\n    const _this$state = this.state,\n          isLoading = _this$state.isLoading,\n          value = _this$state.value,\n          results = _this$state.results;\n    return React.createElement(Grid, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53\n      },\n      __self: this\n    }, React.createElement(Grid.Column, {\n      width: 6,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54\n      },\n      __self: this\n    }, React.createElement(Search, Object.assign({\n      loading: isLoading,\n      onResultSelect: this.handleResultSelect,\n      onSearchChange: _.debounce(this.handleSearchChange, 500, {\n        leading: true\n      }),\n      results: results,\n      value: value,\n      resultRenderer: resultRenderer\n    }, this.props, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55\n      },\n      __self: this\n    }))), React.createElement(Grid.Column, {\n      width: 10,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67\n      },\n      __self: this\n    }, React.createElement(Segment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68\n      },\n      __self: this\n    }, React.createElement(Header, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69\n      },\n      __self: this\n    }, \"State\"), React.createElement(\"pre\", {\n      style: {\n        overflowX: 'auto'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70\n      },\n      __self: this\n    }, JSON.stringify(this.state, null, 2)), React.createElement(Header, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73\n      },\n      __self: this\n    }, \"Options\"), React.createElement(\"pre\", {\n      style: {\n        overflowX: 'auto'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    }, JSON.stringify(this.props.source, null, 2)))));\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    source: state.source\n  };\n};\n\nexport default connect(mapStateToProps, {\n  searchSource\n})(SearchBar);","map":{"version":3,"sources":["/Users/guligenaaierken/Desktop/Final Project/Therappoint_frontend/therappoint_frontend/src/components/SearchBar.js"],"names":["PropTypes","_","faker","React","Component","Search","Grid","Header","Segment","Label","connect","searchSource","source","times","title","company","companyName","description","catchPhrase","image","internet","avatar","price","finance","amount","resultRenderer","propTypes","string","initialState","isLoading","results","value","SearchBar","state","handleResultSelect","e","result","console","log","target","setState","handleSearchChange","props","setTimeout","length","re","RegExp","escapeRegExp","isMatch","test","filter","render","debounce","leading","overflowX","JSON","stringify","mapStateToProps"],"mappings":"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","sourcesContent":["import PropTypes from 'prop-types'\nimport _ from 'lodash'\nimport faker from 'faker'\nimport React, { Component } from 'react'\nimport { Search, Grid, Header, Segment, Label } from 'semantic-ui-react'\nimport { connect } from 'react-redux'\nimport {searchSource} from '../reducer/actions'\nconst source = _.times(5, () => ({\n  title: faker.company.companyName(),\n  description: faker.company.catchPhrase(),\n  image: faker.internet.avatar(),\n  price: faker.finance.amount(0, 100, 2, '$'),\n}))\n\nconst resultRenderer = ({ title }) => <Label content={title} />\n\nresultRenderer.propTypes = {\n  title: PropTypes.string,\n  description: PropTypes.string,\n}\n\nconst initialState = { isLoading: false, results: [], value: '' }\n\nclass SearchBar extends Component {\n  state = initialState\n\n  handleResultSelect = (e, { result }) => {\n      console.log(e.target)\n      this.setState({ value: result.title })\n    }\n\n  handleSearchChange = (e, { value }) => {\n    this.setState({ isLoading: true, value })\n    this.props.searchSource()\n\n    setTimeout(() => {\n      if (this.state.value.length < 1) return this.setState(initialState)\n\n      const re = new RegExp(_.escapeRegExp(this.state.value), 'i')\n      const isMatch = (result) => re.test(result.title)\n\n      this.setState({\n        isLoading: false,\n        results: _.filter(source, isMatch),\n      })\n    }, 300)\n  }\n\n  render() {\n    const { isLoading, value, results } = this.state\n     \n    return (\n      <Grid>\n        <Grid.Column width={6}>\n          <Search\n            loading={isLoading}\n            onResultSelect={this.handleResultSelect}\n            onSearchChange={_.debounce(this.handleSearchChange, 500, {\n              leading: true,\n            })}\n            results={results}\n            value={value}\n            resultRenderer={resultRenderer}\n            {...this.props}\n          />\n        </Grid.Column>\n        <Grid.Column width={10}>\n          <Segment>\n            <Header>State</Header>\n            <pre style={{ overflowX: 'auto' }}>\n              {JSON.stringify(this.state, null, 2)}\n            </pre>\n            <Header>Options</Header>\n            <pre style={{ overflowX: 'auto' }}>\n              {JSON.stringify(this.props.source, null, 2)}\n            </pre>\n          </Segment>\n        </Grid.Column>\n      </Grid>\n    )\n  }\n}\n\n\nconst mapStateToProps = (state) => {\n    return {\n        source: state.source\n    } \n}\n\nexport default connect(mapStateToProps, {searchSource})(SearchBar)"]},"metadata":{},"sourceType":"module"}